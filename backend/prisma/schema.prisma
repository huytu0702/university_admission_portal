generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  firstName    String
  lastName     String
  role         String        @default("applicant")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

model Application {
  id                String            @id @default(uuid())
  userId            String
  status            String            @default("submitted")
  personalStatement String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  progress          Int               @default(0)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  applicationFiles  ApplicationFile[]
  emails            Email[]
  payment           Payment?
}

model ApplicationFile {
  id            String      @id @default(uuid())
  applicationId String
  fileName      String
  fileType      String
  fileSize      Int
  filePath      String
  verified      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String      @id @default(uuid())
  applicationId   String      @unique
  paymentIntentId String
  amount          Int
  currency        String      @default("usd")
  status          String      @default("pending")
  paymentUrl      String?
  provider        String      @default("mock")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Email {
  id            String       @id @default(uuid())
  toAddress     String
  subject       String
  status        String
  sentAt        DateTime     @default(now())
  createdAt     DateTime     @default(now())
  applicationId String?
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Outbox {
  id         String   @id @default(uuid())
  eventType  String
  payload    String   // JSON string
  processedAt DateTime?
  createdAt  DateTime @default(now())
}

model Metric {
  id        String   @id @default(uuid())
  endpoint  String
  method    String
  latency   Int
  userId    String?
  timestamp DateTime @default(now())

  @@map("metrics")
}

model FeatureFlag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  enabled     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
