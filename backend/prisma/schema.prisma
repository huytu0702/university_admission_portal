generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  firstName    String
  lastName     String
  role         String        @default("applicant")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

model Application {
  id                String            @id @default(uuid())
  userId            String
  status            String            @default("submitted")
  personalStatement String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  applicationFiles  ApplicationFile[]
  payment           Payment?
}

model ApplicationFile {
  id            String      @id @default(uuid())
  applicationId String
  fileName      String
  fileType      String
  fileSize      Int
  filePath      String
  verified      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String      @id @default(uuid())
  applicationId   String      @unique
  paymentIntentId String
  amount          Int
  currency        String      @default("usd")
  status          String      @default("pending")
  paymentUrl      String?
  provider        String      @default("mock")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Email {
  id         String   @id @default(uuid())
  toAddress  String   // email recipient
  subject    String   // email subject
  status     String   // sent, failed
  sentAt     DateTime @default(now())
  createdAt  DateTime @default(now())
}

model Metric {
  id       String   @id @default(uuid())
  endpoint String   // API endpoint
  method   String   // HTTP method
  latency  Int      // Latency in milliseconds
  userId   String?  // Optional user ID
  timestamp DateTime @default(now())
  @@map("metrics")
}
